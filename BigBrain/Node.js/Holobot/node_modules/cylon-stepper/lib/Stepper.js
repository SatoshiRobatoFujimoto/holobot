/*
 * Stepper driver
 * http://github.com/ooeygui/cylon-stepper
 * 
 * Based on the excellent AccelStepper library http://www.airspayce.com/mikem/arduino/AccelStepper/
 *
 * Licensed under the Apache 2.0 license.
 */

"use strict";

var Cylon = require("cylon");
//var Firmata = require("firmata");

var DIRECTION_CW = 1;
var DIRECTION_CCW = 0;

/**
 * A Stepper driver
 *
 * @constructor motor
 *
 * @param {Object} opts
 * @param {String|Number} opts.pin the pin to connect to
 */
var StepperMotor = module.exports = function StepperMotor(opts)
{
    StepperMotor.__super__.constructor.apply(this, arguments);

    this.maxSpeed = 0;
    this.acceleration = 0;
    this.driveType = opts.driveType || null;
    this.deviceNum = opts.deviceNum;
    this.stepsPerRevolution = opts.stepsPerRevolution || null;
    this.stepPin = opts.stepPin || null;
    this.dirPin = opts.dirPin || null;
    this.enablePin = opts.enablePin || null;
    this.currentPosition = 0;
    this.targetPosition = 0;
    this.running = false;
    this.progress = 0;


    if (this.driveType == null)
    {
        throw new Error("Stepper device type not specified");
    }

    if (this.deviceNum == null)
    {
        throw new Error("Stepper device number not specified");
    }

    if (this.stepsPerRevolution == null)
    {
        throw new Error("Need steps per rev");
    }

    if (this.stepPin == null)
    {
        throw new Error("No step pin specified for Motor. Cannot proceed");
    }

    if (this.dirPin == null)
    {
        throw new Error("No dir pin specified for Motor. Cannot proceed");
    }

    if (this.enablePin == null)
    {
        throw new Error("No enable pin specified for Motor. Cannot proceed");
    }


    this.commands =
    {
        turn_on: this.turnOn,
        turn_off: this.turnOff,
        toggle: this.toggle,
        speed: this.speed,
        current_speed: this.currentSpeed
    };
};

/** Subclasses the Cylon.Driver class */
Cylon.Utils.subclass(StepperMotor, Cylon.Driver);

/**
 * Starts the Motor
 *
 * @param {Function} callback to be triggered when started
 * @return {null}
 */
StepperMotor.prototype.start = function(callback)
{
    // make sure it is turned off on startup
    this.disableOutputs();
    this.connection.board.stepperConfig(this.deviceNum, this.driveType, this.stepsPerRevolution, this.dirPin, this.stepPin);
    //this.connection.board.setStepperProgress(this.deviceNum, function(progress)
    //{
    //    this.progress = progress;
    //}.bind(this));

    callback();
}

/**
 * Stops the Motor
 *
 * @param {Function} callback to be triggered when halted
 * @return {null}
 */
StepperMotor.prototype.halt = function(callback)
{
    // make sure it is turned off on startup
    this.disableOutputs();

    callback();
}

// 0 - 100
StepperMotor.prototype.percentComplete = function()
{
    return this.progress;
}

StepperMotor.prototype.setAcceleration = function(acceleration)
{
    if (acceleration == 0.0)
    {
        return;
    }

    this.acceleration = acceleration;
}

StepperMotor.prototype.setMaxSpeed = function(speed)
{
    this.maxSpeed = speed;
    this.speed = speed;
}


/**
 * Moves StepperMotor to absolute position
 *
 * @return {Number} the current motor speed
 * @publish
 */
StepperMotor.prototype.moveTo = function(value, complete)
{
    if (this.running)
    {
        return false;
    }

    this.running = true;
    this.progress = 0;
    this.targetPosition = value;
    var stepsToMove = value - this.currentPosition;
    this.direction = (stepsToMove > 0)?1:0;
    stepsToMove = Math.abs(stepsToMove);

    this.enableOutputs();

    this.connection.board.stepperStep(this.deviceNum, this.direction, stepsToMove, this.speed, this.acceleration, this.acceleration,
    function ()
    {
        this.currentPosition = this.targetPosition;

        this.disableOutputs();
        this.running = false;
        this.progress = 100;
        if (complete)
        {
            complete();
        }

    }.bind(this));

    return true;
}

StepperMotor.prototype.move = function(value, complete)
{
    if (this.running)
    {
        return false;
    }

    this.running = true;

    this.progress = 0;
    this.direction = value > 0;
    value = Math.abs(value);
    this.enableOutputs();

    this.connection.board.stepperStep(this.deviceNum, this.direction, value, this.speed, this.acceleration, this.acceleration,
    function ()
    {
        this.currentPosition += value;

        this.disableOutputs();
        this.running = false;
        this.progress = 100;
        if (complete)
        {
            complete();
        }
        console.log("Complete");
    }.bind(this));

    return true;
}

StepperMotor.prototype.enableOutputs = function(value)
{
    this.connection.digitalWrite(this.enablePin, 0);
}


StepperMotor.prototype.disableOutputs = function(value)
{
    this.connection.digitalWrite(this.enablePin, 1);
}

